import "./chunk-GKWPUQBP.js";

// node_modules/vue3-dialog/dialog.js
var dialog = (options) => {
  const dialogWrapper = document.createElement("div");
  const dialogBox = document.createElement("div");
  const message = document.createElement("div");
  const buttons = document.createElement("div");
  message.appendChild(document.createTextNode(options.message));
  Object.keys(options.buttons).forEach((key) => {
    var _a, _b, _c;
    const button = document.createElement("button");
    button.onclick = () => {
      if (key in options.callbacks)
        options.callbacks[key]();
      dialogWrapper.parentNode.removeChild(dialogWrapper);
    };
    button.appendChild(document.createTextNode(((_a = options.buttons[key]) == null ? void 0 : _a.text) || key.charAt(0).toUpperCase() + key.toLowerCase().slice(1)));
    button.classList.add(...((_c = (_b = options.buttons[key]) == null ? void 0 : _b.class) == null ? void 0 : _c.split(" ")) || ["__dialog-button", "__dialog-button-" + key.toLowerCase()]);
    buttons.appendChild(button);
  });
  dialogWrapper.classList.add(...options.wrapperClass.split(" "));
  dialogBox.classList.add(...options.boxClass.split(" "));
  message.classList.add(...options.messageClass.split(" "));
  buttons.classList.add(...options.buttonsClass.split(" "));
  dialogWrapper.appendChild(dialogBox);
  dialogBox.appendChild(message);
  dialogBox.appendChild(buttons);
  document.body.appendChild(dialogWrapper);
  document.activeElement.blur();
};
var dialog_default = dialog;

// node_modules/vue3-dialog/styles.js
var applyStyles = (options) => {
  const style = document.createElement("style");
  style.appendChild(document.createTextNode(`
    ${options.wrapper ? `.__dialog-wrapper {
        position: fixed;
        z-index: 10;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,${options.darken});
    }` : ""}
    
    ${options.default ? `.__dialog-box {
        font-family: Inter, Avenir, Helvetica, Arial, sans-serif;
        font-size: 16px;
        line-height: 24px;
        font-weight: 400;
        color: rgba(255, 255, 255, 0.87);
        background-color: rgb(51, 50, 50);
        width: fit-content;
        height: fit-content;
        margin: 20% auto;
        padding: 20px;
        text-align: center;
        border-radius: 10px;
    }
    
    .__dialog-message {
        margin-bottom: 20px;
    }
    
    .__dialog-buttons {
        display: flex;
        justify-content: space-between;
        gap: 50px;
    }
    
    .__dialog-button  {
        color: rgba(255, 255, 255, 0.87);
        border-radius: 8px;
        border: 1px solid transparent;
        padding: 0.6em 1.2em;
        font-size: 1em;
        font-weight: 500;
        font-family: inherit;
        background-color: #1a1a1a;
        cursor: pointer;
        transition: border-color 0.25s;
    }
    
    .__dialog-button-confirm {
        background-color: #535bf2;
    }

    .__dialog-button-delete {
        --colour: #f22e1f;
        background-color: var(--colour);
        border-color: var(--colour);
    }

    .__dialog-button:hover {
        border-color: #646cff;
    }

    .__dialog-button-delete:hover, .__dialog-button-confirm:hover {
        border-color: white;
    }

    .__dialog-button:focus,
    .__dialog-button:focus-visible {
        outline: 4px auto -webkit-focus-ring-color;
    }` : ""}
    `));
  document.head.append(style);
};
var styles_default = applyStyles;

// node_modules/vue3-dialog/index.ts
var plugin = {
  install(app, options) {
    app.config.globalProperties.$dialogOptions = {
      message: "Hello World!",
      buttons: ["cancel", "confirm"],
      presets: {},
      callbacks: {},
      wrapperClass: "__dialog-wrapper",
      boxClass: "__dialog-box",
      messageClass: "__dialog-message",
      buttonsClass: "__dialog-buttons",
      css: {
        default: true,
        wrapper: true,
        darken: 0.6
      }
    };
    const mergeOptions = (localOptions) => {
      const globalOptions = app.config.globalProperties.$dialogOptions;
      if (localOptions) {
        if ("preset" in localOptions) {
          const p = globalOptions.presets[localOptions.preset];
          if (p) {
            for (const key in p)
              localOptions[key] = localOptions[key] || p[key];
          }
        }
        const merged = { ...globalOptions, ...localOptions, css: { ...globalOptions.css, ...(localOptions == null ? void 0 : localOptions.css) || {} } };
        if (Array.isArray(merged.buttons)) {
          const buttons = {};
          merged.buttons.forEach((b) => buttons[b] = {});
          merged.buttons = buttons;
        }
        Object.keys(localOptions).forEach((key) => {
          const value = localOptions[key];
          if (!["message", "buttons", "presets", "callbacks", "css", "wrapperClass", "boxClass", "messageClass", "buttonsClass", "preset"].includes(key) && value instanceof Function && value.length === 0)
            merged.callbacks[key] = value;
        });
        return merged;
      } else
        return globalOptions;
    };
    app.config.globalProperties.$dialogOptions = mergeOptions(options);
    styles_default(app.config.globalProperties.$dialogOptions.css);
    const createDialog = (localOptions) => dialog_default(mergeOptions(localOptions));
    app.directive("dialog", {
      mounted: (el, { value, arg }) => {
        if (arg) {
          if (value)
            value.preset = arg;
          else
            value = { preset: arg };
        }
        el.onclick = () => createDialog(value || {});
      },
      unmounted: (el) => el.onclick = null
    });
    app.config.globalProperties.$dialog = (localOptions) => createDialog(localOptions);
    app.provide("$dialog", (localOptions) => createDialog(localOptions));
    app.provide("$dialogOptions", app.config.globalProperties.$dialogOptions);
  }
};
var vue3_dialog_default = plugin;
export {
  vue3_dialog_default as default
};
//# sourceMappingURL=vue3-dialog.js.map
